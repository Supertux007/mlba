theme_minimal()
# Create a ggplot object for men's salaries
p1 <- ggplot(subset(d, sex == 1), aes(x = incwage)) +
geom_histogram(binwidth = 1000, fill = "blue") +
labs(title = "Salary Distribution for Men", x = "Wage") +
theme_minimal()
# Create a ggplot object for women's salaries
p2 <- ggplot(subset(d, sex == 2), aes(x = incwage)) +
geom_histogram(binwidth = 1000, fill = "red") +
labs(title = "Salary Distribution for Women", x = "Wage") +
theme_minimal()
# Combine the two plots into one figure with two panels
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
# Calculate the average salary by gender
avg_salary <- tapply(incwage, sex, mean)
# Create a bar plot
barplot(avg_salary, col = c("blue", "red"), names.arg = c("Men", "Women"),
main = "Average Salary by Gender", xlab = "Sex", ylab = "Average Wage")
text(1:2, avg_salary, labels = round(avg_salary, 2), pos = 3, cex = 1, col = "black")
# Calculate the average salary by gender
avg_salary <- tapply(incwage, sex, mean)
# Create a bar plot
barplot(avg_salary, col = c("blue", "red"), names.arg = c("Men", "Women"),
main = "Average Salary by Gender", xlab = "Sex", ylab = "Average Wage")
# Add labels for the average salaries
text(1:2, avg_salary, labels = round(avg_salary, 2), pos = 3, cex = 1, col = "black")
# Create a bar plot
barplot(avg_salary, col = c("blue", "red"), names.arg = c("Men", "Women"),
main = "Average Salary by Gender", xlab = "Sex", ylab = "Average Wage")
# Add labels for the average salaries
text(1:2, avg_salary, labels = round(avg_salary, 2), pos = 3, cex = 1, col = "black")
# Create a bar plot
bp <- barplot(avg_salary, col = c("blue", "red"), names.arg = c("Men", "Women"),
main = "Average Salary by Gender", xlab = "Sex", ylab = "Average Wage")
# Add labels for the average salaries for both genders
text(bp, avg_salary, labels = round(avg_salary, 2), pos = 3, cex = 1, col = "black")
d1 <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 1/Data Science in Business Analytics /gendergap.csv')
View(d1)
d2 <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 1/Data Science in Business Analytics /averagehourly.csv')
View(d2)
View(d2)
xs <- c(2, 4, 6)
for (x in xs) {
xs <- c(xs, x * 2)
}
xs
x <- c(4:-4)
ifelse(x >= 0, x, 4)
ifelse(x < 0, x, -4)
f1 <- function(x) {
if (x < 10) {
return(0)
}
stop("I'm an error")
}
f2 <- function(x) {
if (x < 10) {
0
}
stop("I'm an error")
}
f1(5)
f2(5)
x <- 2
f1 <- function(x) {
for (i in 1:x) {
x <- x + 1
}
x
}
f2 <- function() {
for (i in 1:x) {
x <- x + 1
}
x
}
f1(x)
f2()
df <- tibble(
i = 1:6,
j = letters[1:6],
k = 6:1,
l = LETTERS[1:6]
)
install.packages("tibble")
install.packages("tibble")
df <- tibble(
i = 1:6,
j = letters[1:6],
k = 6:1,
l = LETTERS[1:6]
)
install.packages("tibble")
install.packages("tibble")
df <- tibble(
i = 1:6,
j = letters[1:6],
k = 6:1,
l = LETTERS[1:6]
)
library(tibble)
df <- tibble(
i = 1:6,
j = letters[1:6],
k = 6:1,
l = LETTERS[1:6]
)
df[3:1, 4:3]
dtest <- read.csv(here::here('CurrentPopulationSurvey.csv'))
install.packages('<R-package-file>', repos=NULL)
install.packages('<R-package-file>')
install.packages('<R-package-file>', repos=NULL)
install.packages('<R-package-file>')
if (!require("renv")) {
# Install renv if it is not already installed
install.packages("renv")
}
library("renv")
# Check if renv is already initialized
if (!file.exists("renv.lock")) {
# Initialize renv project
renv::init()
# Restore packages
renv::restore()
}
renv::init()
install.packages("reticulate")
install.packages("tidyverse")
library(reticulate)
library(tidyverse)
reticulate::install_miniconda()
reticulate::conda_create()
reticulate::use_condaenv()
reticulate::use_condaenv()
# assign the right virtual environment for the exercises
env_name <- "MLBA"
# if the virtual enviroment does not already exist, only then create then
if (!env_name %in% reticulate::conda_list()$name) {
reticulate::conda_create(env_name, pip = TRUE) # we use pip for installations
}
# make sure we're using the right environment
reticulate::use_condaenv(env_name)
# if you preferred, you can also use your own version of python with `use_python()`
# you can see all the versions of your path here and which one has been assigned
reticulate::py_config()
# Check if python is setup properly now
reticulate::py_available()
renv::init(force = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
header = paste0("```{", knitr::opts_current$get("engine.name"), "}"),
footer = "```",
fig.align="center"
)
# Check if renv is installed
if (!require("renv")) {
# Install renv if it is not already installed
install.packages("renv")
}
# Check if renv is already initialized
if (!file.exists("renv.lock")) {
# Initialize renv project
renv::init()
# Restore packages
renv::restore()
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
header = paste0("```{", knitr::opts_current$get("engine.name"), "}"),
footer = "```",
fig.align="center"
)
# Check if renv is installed
if (!require("renv")) {
# Install renv if it is not already installed
install.packages("renv")
}
# Check if renv is already initialized
if (!file.exists("renv.lock")) {
# Initialize renv project
renv::init()
# Restore packages
renv::restore()
}
library(reticulate)
library(tidyverse)
# reticulate::install_miniconda() # if you got an error, you could also try `install_python()` or installing conda seperately on your OS
# assign the right virtual environment for the exercises
env_name <- "MLBA"
# if the virtual enviroment does not already exist, only then create then
if (!env_name %in% reticulate::conda_list()$name) {
reticulate::conda_create(env_name, pip = TRUE) # we use pip for installations
}
# make sure we're using the right environment
reticulate::use_condaenv(env_name)
# if you preferred, you can also use your own version of python with `use_python()`
# you can see all the versions of your path here and which one has been assigned
reticulate::py_config()
# Check if python is setup properly now
reticulate::py_available()
knitr::include_graphics("https://blog.penjee.com/wp-content/uploads/2015/02/pass-by-reference-vs-pass-by-value-animation.gif")
reticulate::repl_python()
# Install python package into virtual environment
reticulate::py_install(c("jupyter", "pandas", "matplotlib","statsmodels","scikit-learn", "seaborn", "mlxtend", "lime", "mkl-service", "xgboost", "lime", "gap-stat","scikit-learn-extra"), envname = "MLBA", pip=TRUE)
# import package that is used for dealing with data.frames in Python (equivalent of tibble+dplyr)
pd <- reticulate::import("pandas")
# Install python package into virtual environment
reticulate::py_install(c("jupyter", "pandas", "matplotlib","statsmodels","scikit-learn", "seaborn", "mlxtend", "lime", "mkl-service", "xgboost", "lime", "gap-stat","scikit-learn-extra"), envname = "MLBA", pip=TRUE)
py_config()
reticulate::py_install("mkl-service")
reticulate::py_install("mkl-service", pip = TRUE)
reticulate::py_install(c("mkl-service"), pip = TRUE)
reticulate::py_install(c("mkl-service"), envname = "MLBA", pip = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
header = paste0("```{", knitr::opts_current$get("engine.name"), "}"),
footer = "```",
fig.align="center"
)
# Check if renv is installed
if (!require("renv")) {
# Install renv if it is not already installed
install.packages("renv")
}
# Check if renv is already initialized
if (!file.exists("renv.lock")) {
# Initialize renv project
renv::init()
# Restore packages
renv::restore()
}
library(reticulate)
library(tidyverse)
# assign the right virtual environment for the exercises
env_name <- "MLBA"
# if the virtual enviroment does not already exist, only then create then
if (!env_name %in% reticulate::conda_list()$name) {
reticulate::conda_create(env_name, pip = TRUE) # we use pip for installations
}
# make sure we're using the right environment
reticulate::use_condaenv(env_name)
# if you preferred, you can also use your own version of python with `use_python()`
# you can see all the versions of your path here and which one has been assigned
reticulate::py_config()
# Check if python is setup properly now
reticulate::py_available()
reticulate::repl_python()
# Install python package into virtual environment
reticulate::py_install(c("jupyter", "pandas", "matplotlib","statsmodels","scikit-learn", "seaborn", "mlxtend", "lime", "mkl-service", "xgboost", "lime", "gap-stat","scikit-learn-extra"), envname = "MLBA", pip=TRUE)
# Install python package into virtual environment
reticulate::py_install(c("jupyter", "pandas", "matplotlib","statsmodels","scikit-learn", "seaborn", "mlxtend", "lime", "xgboost", "lime", "gap-stat","scikit-learn-extra"), envname = "MLBA", pip=TRUE)
# import package that is used for dealing with data.frames in Python (equivalent of tibble+dplyr)
pd <- reticulate::import("pandas")
# import the package for plotting in python
plt <- reticulate::import("matplotlib.pyplot")
# import the library which we will use for linear regression
sm <- reticulate::import("statsmodels.api")
# Using R
## load mtcars dataset
data(mtcars)
## plot it using base R plot function (or ggplot)
plot(mtcars$mpg, mtcars$disp)
# Using Python
# plot it using matplotlib in python (or another python library for plots)
plt$scatter(mtcars$mpg,mtcars$disp)
plt$xlabel('mpg', fontsize = 12)
plt$ylabel('disp', fontsize = 12)
# save the figure and then include in the Rmd
plt$savefig("pyplot.png")
knitr::include_graphics("pyplot.png")
# alternatively, when not knitting, you can uncomment and run the two following lines
# instead of save the figure
# plt$show() # you always have to call this for the plot to be made
# plt$clf() #this means clear figure
reticulate::repl_python()
# plotting the iris data from python
plot(py$iris_data)
# remove the spaces and `(cm)` from the column names
names(py$iris_data) <- gsub(' ', '_', names(py$iris_data))
names(py$iris_data) <- gsub('_\\(cm\\)', '', names(py$iris_data))
# example of running a model on iris data
r_lm <- lm("sepal_length ~. ", data = py$iris_data)
reticulate::repl_python()
# plotting the iris data from python
plot(py$iris_data)
# example of runnning lm model in python -> firstly, process the data
# specify your dependent variable and independent variables
y_iris = select(py$iris_data, "sepal_length")
# plotting the iris data from python
plot(py$iris_data)
reticulate::repl_python()
# plotting the iris data from python
plot(py$iris_data)
# plotting the iris data from python
# Convert index to string format
iris_data_index <- index(py$iris_data)
# Convert index to string format
index_as_string <- as.character(rownames(py$iris_data))
# Plotting the iris data from Python
plot(py$iris_data, index = index_as_string)
# plotting the iris data from python
plot(py$iris_data)
# # Convert index to string format
# index_as_string <- as.character(rownames(py$iris_data))
#
# # Plotting the iris data from Python
# plot(py$iris_data, index = index_as_string)
# remove the spaces and `(cm)` from the column names
names(py$iris_data) <- gsub(' ', '_', names(py$iris_data))
names(py$iris_data) <- gsub('_\\(cm\\)', '', names(py$iris_data))
# example of running a model on iris data
r_lm <- lm("sepal_length ~. ", data = py$iris_data)
# Convert py$iris_data to a data frame if it's not already
if (!is.data.frame(py$iris_data)) {
py$iris_data <- as.data.frame(py$iris_data)
}
# Remove the spaces and '(cm)' from the column names
names(py$iris_data) <- gsub(' ', '_', names(py$iris_data))
names(py$iris_data) <- gsub('_\\(cm\\)', '', names(py$iris_data))
# Run the linear regression model
r_lm <- lm(sepal_length ~ ., data = py$iris_data)
# example of runnning lm model in python -> firstly, process the data
# specify your dependent variable and independent variables
y_iris = select(py$iris_data, "sepal_length")
x_iris = select(py$iris_data, -"sepal_length")
# for python approach, we need to add a constant to predictor variables
x_iris = sm$add_constant(x_iris)
# create a linear regression model and fit it to the data
py_lm = sm$OLS(y_iris, x_iris)$fit()
# get the model summary
print(py_lm$summary())
reticulate::repl_python()
# remove the spaces and `(cm)` from the column names
names(py$iris_data) <- gsub(' ', '_', names(py$iris_data))
names(py$iris_data) <- gsub('_\\(cm\\)', '', names(py$iris_data))
# example of running a model on iris data
r_lm <- lm("sepal_length ~. ", data = py$iris_data)
knitr::opts_chunk$set(fig.align="center", results = 'hide', fig.show = 'hide')
real_estate_data <- read.csv(here::here("labs/data/real_estate_data.csv"))
real_estate_data <- read.csv(here::here("labs/data/real_estate_data.csv"))
real_estate_data <- read.csv(here::here("real_estate_data.csv"))
## adapt the path to the data
# if you encountered any error with the encoding of the data (`Error in gregexpr...`), just re-run the code again
str(real_estate_data)
library(summarytools)
dfSummary(real_estate_data)
library(dplyr)
library(ggplot2)
real_estate_data %>% ggplot(aes(x=Month, y=Price, fill=as.factor(Year))) +
geom_boxplot()+ facet_wrap(~as.factor(Year))
View(real_estate_data)
real_estate_data <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv')
attach(real_estate_data)
#real_estate_data <- read.csv(here::here("real_estate_data.csv"))
## adapt the path to the data
# if you encountered any error with the encoding of the data (`Error in gregexpr...`), just re-run the code again
str(real_estate_data)
library(summarytools)
dfSummary(real_estate_data)
library(dplyr)
library(ggplot2)
real_estate_data %>% ggplot(aes(x=Month, y=Price, fill=as.factor(Year))) +
geom_boxplot()+ facet_wrap(~as.factor(Year))
# real_estate_data <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv')
# attach(real_estate_data)
real_estate_data <- read.csv(here::here('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv'))
## adapt the path to the data
# if you encountered any error with the encoding of the data (`Error in gregexpr...`), just re-run the code again
str(real_estate_data)
library(summarytools)
dfSummary(real_estate_data)
library(dplyr)
library(ggplot2)
real_estate_data %>% ggplot(aes(x=Month, y=Price, fill=as.factor(Year))) +
geom_boxplot()+ facet_wrap(~as.factor(Year))
# real_estate_data <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv')
# attach(real_estate_data)
real_estate_data <- read.csv(here::here('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv'))
## adapt the path to the data
# if you encountered any error with the encoding of the data (`Error in gregexpr...`), just re-run the code again
str(real_estate_data)
library(summarytools)
dfSummary(real_estate_data)
library(dplyr)
library(ggplot2)
real_estate_data %>% ggplot(aes(x=Month, y=Price, fill=as.factor(Year))) +
geom_boxplot()+ facet_wrap(~as.factor(Year))
knitr::opts_chunk$set(fig.align="center", results = 'hide', fig.show = 'hide')
# real_estate_data <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv')
# attach(real_estate_data)
real_estate_data <- read.csv(here::here('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv'))
## adapt the path to the data
# if you encountered any error with the encoding of the data (`Error in gregexpr...`), just re-run the code again
str(real_estate_data)
library(summarytools)
dfSummary(real_estate_data)
library(dplyr)
library(ggplot2)
real_estate_data %>% ggplot(aes(x=Month, y=Price, fill=as.factor(Year))) +
geom_boxplot()+ facet_wrap(~as.factor(Year))
real_estate_data <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv')
attach(real_estate_data)
#real_estate_data <- read.csv(here::here('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv'))
## adapt the path to the data
# if you encountered any error with the encoding of the data (`Error in gregexpr...`), just re-run the code again
str(real_estate_data)
library(summarytools)
dfSummary(real_estate_data)
library(dplyr)
library(ggplot2)
real_estate_data %>% ggplot(aes(x=Month, y=Price, fill=as.factor(Year))) +
geom_boxplot()+ facet_wrap(~as.factor(Year))
file.exists("/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv")
head(readLines("/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv"))
real_estate_data <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv', sep = ';'))
real_estate_data <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv', sep = ';')
attach(real_estate_data)
real_estate_data <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv', sep = '\t')
attach(real_estate_data)
real_estate_data <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv', sep = '\t')
#attach(real_estate_data)
#real_estate_data <- read.csv(here::here('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv'))
## adapt the path to the data
# if you encountered any error with the encoding of the data (`Error in gregexpr...`), just re-run the code again
str(real_estate_data)
library(summarytools)
dfSummary(real_estate_data)
library(dplyr)
library(ggplot2)
real_estate_data %>% ggplot(aes(x=Month, y=Price, fill=as.factor(Year))) +
geom_boxplot()+ facet_wrap(~as.factor(Year))
real_estate_data <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv', sep = ';')
#attach(real_estate_data)
#real_estate_data <- read.csv(here::here('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv'))
## adapt the path to the data
# if you encountered any error with the encoding of the data (`Error in gregexpr...`), just re-run the code again
str(real_estate_data)
library(summarytools)
dfSummary(real_estate_data)
library(dplyr)
library(ggplot2)
real_estate_data %>% ggplot(aes(x=Month, y=Price, fill=as.factor(Year))) +
geom_boxplot()+ facet_wrap(~as.factor(Year))
knitr::opts_chunk$set(fig.align="center", results = 'hide', fig.show = 'hide')
real_estate_data <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv')
#attach(real_estate_data)
#real_estate_data <- read.csv(here::here('/Users/admin/Desktop/A HEC/Master/Semestre 2/Machine Learning/mlba/real_estate_data.csv'))
## adapt the path to the data
# if you encountered any error with the encoding of the data (`Error in gregexpr...`), just re-run the code again
str(real_estate_data)
library(summarytools)
dfSummary(real_estate_data)
library(dplyr)
library(ggplot2)
real_estate_data %>% ggplot(aes(x=Month, y=Price, fill=as.factor(Year))) +
geom_boxplot()+ facet_wrap(~as.factor(Year))
View(real_estate_data)
library(GGally)
real_estate_data %>%
select(Price, HouseAge, Dist, Lat, Long, TransDate) %>%
ggpairs()
View(real_estate_data)
View(real_estate_data)
str(real_estate_data)
knitr::opts_chunk$set(fig.align="center", results = 'hide', fig.show = 'hide')
library(ISLR)
library(dplyr)
MyCarseats <- Carseats %>% mutate(SaleHigh=ifelse(Sales > 7.5, "Yes", "No"))
MyCarseats <- MyCarseats %>% select(-Sales)
set.seed(123) # for reproducibility
index_tr <- sample(x=1:nrow(MyCarseats), size=2/3*nrow(MyCarseats), replace=FALSE)
df_tr <- MyCarseats[index_tr,]
df_te <- MyCarseats[-index_tr,]
library(rpart)
library(rpart.plot)
set.seed(1234)
carseats_tree <- rpart(SaleHigh ~ ., data=df_tr)
rpart.plot(carseats_tree)
# Load MLBA environment
library(reticulate)
use_condaenv("MLBA")
reticulate::repl_python()
knitr::include_graphics("tree_high_dpi.png")
plotcp(carseats_tree)
carseats_tree_prune <- prune(carseats_tree, cp=0.025)
rpart.plot(carseats_tree_prune)
library(adabag)
set.seed(123455)
rpart.plot(autoprune(SaleHigh ~ ., data=df_tr))
reticulate::repl_python()
knitr::include_graphics("tree_pruned_high_dpi.png")
reticulate::repl_python()
MyCarseats[1,]
pred <- predict(carseats_tree_prune, newdata=df_te, type="class")
table(Pred=pred, Obs=df_te$SaleHigh)
predict(carseats_tree_prune, newdata=df_te, type="prob")
reticulate::repl_python()
set.seed(123)
carseats_reg <- rpart(Sales ~ ., data=Carseats)
rpart.plot(carseats_reg)
Carseats[1,]
carseat_reg_pred <- predict(carseats_reg)
plot(carseat_reg_pred ~ Carseats$Sales,
xlab="Sales", ylab="Predictions")
abline(0,1, col="red")
reticulate::repl_python()
