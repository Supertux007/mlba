allele_1_freq_history <- c(allele_1_freq_history, allele_1_frequency)
allele_2_freq_history <- c(allele_2_freq_history, allele_2_frequency)
total_population_history <- c(total_population_history, population_size)
num_genes_history <- c(num_genes_history, num_genes)
# Calculate change in allele frequency (Δp) and store it
delta_allele_frequency <- allele_1_freq_history[generation] - allele_1_freq_history[generation - 1]
delta_allele_frequency_history <- c(delta_allele_frequency_history, delta_allele_frequency)
# Store the current allele frequency (p) for the generation
generation_frequency_history <- c(generation_frequency_history, allele_1_freq_history[generation])
}
# Create a plot for Δp vs. p
delta_frequency_plot <- plot_ly(x = ~allele_1_freq_history[-1], y = ~delta_allele_frequency_history[-1], type = 'scatter', mode = 'lines') %>%
layout(
title = "Δp vs. p",
xaxis = list(title = "Allele Frequency (p)"),
yaxis = list(title = "Change in Allele Frequency (Δp)")
)
# Interpolate the data for the second plot to match the size of the first plot
interp_generation_frequency_history <- approx(x = seq(0, generations, length.out = length(generation_frequency_history)), y = generation_frequency_history, xout = seq(0, generations, length.out = length(allele_1_freq_history[-1])))$y
# Create a plot for the number of generations vs. p
generation_frequency_plot <- plot_ly(x = ~seq(0, generations, length.out = length(allele_1_freq_history[-1])), y = ~interp_generation_frequency_history, type = 'scatter', mode = 'lines') %>%
layout(
title = "Number of Generations vs. Allele Frequency (p)",
xaxis = list(title = "Generations"),
yaxis = list(title = "Allele Frequency (p)")
)
# Display the interactive plots
subplot(delta_frequency_plot, generation_frequency_plot, nrows = 2)
# Install and load the required package if not already installed
if (!requireNamespace("plotly", quietly = TRUE)) {
install.packages("plotly")
}
library(plotly)
# Parameters
generations <- 100
population_size <- 1000
allele_1_frequency <- 0.7
allele_2_frequency <- 0.3
num_genes <- 2
# Specify selection coefficients for each allele (change these as needed)
s_allele_1 <- 0.1  # Selection coefficient for allele 1
s_allele_2 <- -0.1  # Selection coefficient for allele 2
# Initialize lists to store data
allele_1_freq_history <- c(allele_1_frequency)
allele_2_freq_history <- c(allele_2_frequency)
total_population_history <- c(population_size)
num_genes_history <- c(num_genes)
# Initialize lists for the new plots
delta_allele_frequency_history <- c(0)
generation_frequency_history <- c(allele_1_frequency)
# Simulate population growth with constant selection
for (generation in 1:generations) {
# Calculate new allele frequencies with constant selection
w_allele_1 <- 1 + s_allele_1
w_allele_2 <- 1 + s_allele_2
allele_1_frequency <- (allele_1_frequency * w_allele_1) / (allele_1_frequency * w_allele_1 + allele_2_frequency * w_allele_2)
allele_2_frequency <- 1 - allele_1_frequency
# Calculate new population size (modify as needed)
delta_population <- 50  # Example: Population grows by 50 each generation
population_size <- population_size + delta_population
# Calculate new number of genes (if applicable)
num_genes <- 2 * population_size  # Example: 2 genes per individual
allele_1_freq_history <- c(allele_1_freq_history, allele_1_frequency)
allele_2_freq_history <- c(allele_2_freq_history, allele_2_frequency)
total_population_history <- c(total_population_history, population_size)
num_genes_history <- c(num_genes_history, num_genes)
# Calculate change in allele frequency (Δp) and store it
delta_allele_frequency <- allele_1_freq_history[generation] - allele_1_freq_history[generation - 1]
delta_allele_frequency_history <- c(delta_allele_frequency_history, delta_allele_frequency)
# Store the current allele frequency (p) for the generation
generation_frequency_history <- c(generation_frequency_history, allele_1_freq_history[generation])
}
# Create a plot for Δp vs. p
delta_frequency_plot <- plot_ly(x = ~allele_1_freq_history[-1], y = ~delta_allele_frequency_history[-1], type = 'scatter', mode = 'lines') %>%
layout(
title = "Δp vs. p",
xaxis = list(title = "Allele Frequency (p)"),
yaxis = list(title = "Change in Allele Frequency (Δp)")
)
# Interpolate the data for the second plot to match the size of the first plot
interp_generation_frequency_history <- approx(x = seq(0, generations, length.out = length(generation_frequency_history)), y = generation_frequency_history, xout = seq(0, generations, length.out = length(allele_1_freq_history[-1])))$y
# Create a plot for the number of generations vs. p
generation_frequency_plot <- plot_ly(x = ~seq(0, generations, length.out = length(allele_1_freq_history[-1])), y = ~interp_generation_frequency_history, type = 'scatter', mode = 'lines') %>%
layout(
title = "Number of Generations vs. Allele Frequency (p)",
xaxis = list(title = "Generations"),
yaxis = list(title = "Allele Frequency (p)")
)
# Display the interactive plots
subplot(delta_frequency_plot, generation_frequency_plot, nrows = 2)
# Install and load the required package if not already installed
if (!requireNamespace("plotly", quietly = TRUE)) {
install.packages("plotly")
}
library(plotly)
# Parameters
generations <- 100
population_size <- 1000
allele_1_frequency <- 0.7
allele_2_frequency <- 0.3
num_genes <- 2
# Specify selection coefficients for each allele (change these as needed)
s_allele_1 <- 0.1  # Selection coefficient for allele 1
s_allele_2 <- -0.1  # Selection coefficient for allele 2
# Initialize lists to store data
allele_1_freq_history <- c(allele_1_frequency)
allele_2_freq_history <- c(allele_2_frequency)
total_population_history <- c(population_size)
num_genes_history <- c(num_genes)
# Initialize lists for the new plots
delta_allele_frequency_history <- c(0)
generation_frequency_history <- c(allele_1_frequency)
# Simulate population growth with constant selection
for (generation in 1:generations) {
# Calculate new allele frequencies with constant selection
w_allele_1 <- 1 + s_allele_1
w_allele_2 <- 1 + s_allele_2
allele_1_frequency <- (allele_1_frequency * w_allele_1) / (allele_1_frequency * w_allele_1 + allele_2_frequency * w_allele_2)
allele_2_frequency <- 1 - allele_1_frequency
# Calculate new population size (modify as needed)
delta_population <- 50  # Example: Population grows by 50 each generation
population_size <- population_size + delta_population
# Calculate new number of genes (if applicable)
num_genes <- 2 * population_size  # Example: 2 genes per individual
allele_1_freq_history <- c(allele_1_freq_history, allele_1_frequency)
allele_2_freq_history <- c(allele_2_freq_history, allele_2_frequency)
total_population_history <- c(total_population_history, population_size)
num_genes_history <- c(num_genes_history, num_genes)
# Calculate change in allele frequency (Δp) and store it
delta_allele_frequency <- allele_1_freq_history[generation + 1] - allele_1_freq_history[generation]
delta_allele_frequency_history <- c(delta_allele_frequency_history, delta_allele_frequency)
# Store the current allele frequency (p) for the generation
generation_frequency_history <- c(generation_frequency_history, allele_1_freq_history[generation + 1])
}
# Create a plot for Δp vs. p
delta_frequency_plot <- plot_ly(x = ~allele_1_freq_history[2:(generations + 1)], y = ~delta_allele_frequency_history[2:(generations + 1)], type = 'scatter', mode = 'lines') %>%
layout(
title = "Δp vs. p",
xaxis = list(title = "Allele Frequency (p)"),
yaxis = list(title = "Change in Allele Frequency (Δp)")
)
# Create a plot for the number of generations vs. p
generation_frequency_plot <- plot_ly(x = ~1:generations, y = ~generation_frequency_history[2:(generations + 1)], type = 'scatter', mode = 'lines') %>%
layout(
title = "Number of Generations vs. Allele Frequency (p)",
xaxis = list(title = "Generations"),
yaxis = list(title = "Allele Frequency (p)")
)
# Display the interactive plots
subplot(delta_frequency_plot, generation_frequency_plot, nrows = 2)
# Display the interactive plots
subplot(delta_frequency_plot, generation_frequency_plot, nrows = 3)
plot(delta_frequency_plot)
subplot(delta_frequency_plot)
# Display the interactive plots
subplot(generation_frequency_plot)
# Create a plot for Δp vs. p and allele frequencies
combined_plot <- plot_ly(x = ~1:generations, type = 'scatter', mode = 'lines') %>%
add_trace(y = ~allele_1_freq_history[2:(generations + 1)], name = 'Allele 1 Frequency', line = list(color = 'blue')) %>%
add_trace(y = ~allele_2_freq_history[2:(generations + 1)], name = 'Allele 2 Frequency', line = list(color = 'red')) %>%
layout(
title = "Allele Frequencies and Δp vs. p",
xaxis = list(title = "Generations"),
yaxis = list(title = "Frequency"),
showlegend = TRUE
)
# Display the interactive plot
combined_plot
View(d)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000L)
"data_viewer_max_columns":1000
View(d)
attach(d)
d <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 1/Data Science in Business Analytics /CurrentPopulationSurvey.csv')
attach(d)
colnames(d)[1] ="my_year"
View(d)
attach(d)
#test pour voir les autres columns (permet de voir les 234 au lieu de 50)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000L)
View(d)
d <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 1/Data Science in Business Analytics /CurrentPopulationSurvey.csv')
View(d)
colnames(d)[1] ="my_year"
attach(d)
r_1 <- lm(incwage ~ sex)
summary(r_1)
r_2 <- lm(incwage ~ sex + race + age + region)
summary(r_2)
plot(x = incwage, y = sex, xlab = "x-axis",ylab = "y-axis",  main = "Plot")
abline(r1, col = "black")
abline(r_1, col = "black")
hist(d[sex == 1], col = "blue", main = "Salary Distribution - Men", xlab = "Wage")
hist(incwage[sex == 1], col = "blue", main = "Salary Distribution - Men", xlab = "Wage")
hist(incwage[sex == 2], col = "red", add = TRUE)
legend("topright", legend = c("Men", "Women"), fill = c("blue", "red"))
# Calculate the average salary by gender
avg_salary <- tapply(incwage, sex, mean)
# Create a bar plot
barplot(avg_salary, col = c("blue", "red"), names.arg = c("Men", "Women"),
main = "Average Salary by Gender", xlab = "Sex", ylab = "Average Wage")
library(ggplot2)
# Create a ggplot object
p <- ggplot(df, aes(x = wage, fill = factor(sex)))
p <- ggplot(d, aes(x = wage, fill = factor(sex)))
# Create a side-by-side histogram
p + geom_histogram(binwidth = 1000, position = "dodge") +
scale_fill_manual(values = c("blue", "red")) +
labs(title = "Salary Distribution by Gender", x = "Wage", fill = "Gender") +
theme_minimal()
p <- ggplot(d, aes(x = incwage, fill = factor(sex)))
# Create a side-by-side histogram
p + geom_histogram(binwidth = 1000, position = "dodge") +
scale_fill_manual(values = c("blue", "red")) +
labs(title = "Salary Distribution by Gender", x = "Wage", fill = "Gender") +
theme_minimal()
# Create a ggplot object for men's salaries
p1 <- ggplot(subset(d, sex == 1), aes(x = incwage)) +
geom_histogram(binwidth = 1000, fill = "blue") +
labs(title = "Salary Distribution for Men", x = "Wage") +
theme_minimal()
# Create a ggplot object for women's salaries
p2 <- ggplot(subset(d, sex == 2), aes(x = incwage)) +
geom_histogram(binwidth = 1000, fill = "red") +
labs(title = "Salary Distribution for Women", x = "Wage") +
theme_minimal()
# Combine the two plots into one figure with two panels
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
# Calculate the average salary by gender
avg_salary <- tapply(incwage, sex, mean)
# Create a bar plot
barplot(avg_salary, col = c("blue", "red"), names.arg = c("Men", "Women"),
main = "Average Salary by Gender", xlab = "Sex", ylab = "Average Wage")
text(1:2, avg_salary, labels = round(avg_salary, 2), pos = 3, cex = 1, col = "black")
# Calculate the average salary by gender
avg_salary <- tapply(incwage, sex, mean)
# Create a bar plot
barplot(avg_salary, col = c("blue", "red"), names.arg = c("Men", "Women"),
main = "Average Salary by Gender", xlab = "Sex", ylab = "Average Wage")
# Add labels for the average salaries
text(1:2, avg_salary, labels = round(avg_salary, 2), pos = 3, cex = 1, col = "black")
# Create a bar plot
barplot(avg_salary, col = c("blue", "red"), names.arg = c("Men", "Women"),
main = "Average Salary by Gender", xlab = "Sex", ylab = "Average Wage")
# Add labels for the average salaries
text(1:2, avg_salary, labels = round(avg_salary, 2), pos = 3, cex = 1, col = "black")
# Create a bar plot
bp <- barplot(avg_salary, col = c("blue", "red"), names.arg = c("Men", "Women"),
main = "Average Salary by Gender", xlab = "Sex", ylab = "Average Wage")
# Add labels for the average salaries for both genders
text(bp, avg_salary, labels = round(avg_salary, 2), pos = 3, cex = 1, col = "black")
d1 <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 1/Data Science in Business Analytics /gendergap.csv')
View(d1)
d2 <- read.csv('/Users/admin/Desktop/A HEC/Master/Semestre 1/Data Science in Business Analytics /averagehourly.csv')
View(d2)
View(d2)
xs <- c(2, 4, 6)
for (x in xs) {
xs <- c(xs, x * 2)
}
xs
x <- c(4:-4)
ifelse(x >= 0, x, 4)
ifelse(x < 0, x, -4)
f1 <- function(x) {
if (x < 10) {
return(0)
}
stop("I'm an error")
}
f2 <- function(x) {
if (x < 10) {
0
}
stop("I'm an error")
}
f1(5)
f2(5)
x <- 2
f1 <- function(x) {
for (i in 1:x) {
x <- x + 1
}
x
}
f2 <- function() {
for (i in 1:x) {
x <- x + 1
}
x
}
f1(x)
f2()
df <- tibble(
i = 1:6,
j = letters[1:6],
k = 6:1,
l = LETTERS[1:6]
)
install.packages("tibble")
install.packages("tibble")
df <- tibble(
i = 1:6,
j = letters[1:6],
k = 6:1,
l = LETTERS[1:6]
)
install.packages("tibble")
install.packages("tibble")
df <- tibble(
i = 1:6,
j = letters[1:6],
k = 6:1,
l = LETTERS[1:6]
)
library(tibble)
df <- tibble(
i = 1:6,
j = letters[1:6],
k = 6:1,
l = LETTERS[1:6]
)
df[3:1, 4:3]
dtest <- read.csv(here::here('CurrentPopulationSurvey.csv'))
install.packages('<R-package-file>', repos=NULL)
install.packages('<R-package-file>')
install.packages('<R-package-file>', repos=NULL)
install.packages('<R-package-file>')
if (!require("renv")) {
# Install renv if it is not already installed
install.packages("renv")
}
library("renv")
# Check if renv is already initialized
if (!file.exists("renv.lock")) {
# Initialize renv project
renv::init()
# Restore packages
renv::restore()
}
renv::init()
install.packages("reticulate")
install.packages("tidyverse")
library(reticulate)
library(tidyverse)
reticulate::install_miniconda()
reticulate::conda_create()
reticulate::use_condaenv()
reticulate::use_condaenv()
# assign the right virtual environment for the exercises
env_name <- "MLBA"
# if the virtual enviroment does not already exist, only then create then
if (!env_name %in% reticulate::conda_list()$name) {
reticulate::conda_create(env_name, pip = TRUE) # we use pip for installations
}
# make sure we're using the right environment
reticulate::use_condaenv(env_name)
# if you preferred, you can also use your own version of python with `use_python()`
# you can see all the versions of your path here and which one has been assigned
reticulate::py_config()
# Check if python is setup properly now
reticulate::py_available()
renv::init(force = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
header = paste0("```{", knitr::opts_current$get("engine.name"), "}"),
footer = "```",
fig.align="center"
)
# Check if renv is installed
if (!require("renv")) {
# Install renv if it is not already installed
install.packages("renv")
}
# Check if renv is already initialized
if (!file.exists("renv.lock")) {
# Initialize renv project
renv::init()
# Restore packages
renv::restore()
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
header = paste0("```{", knitr::opts_current$get("engine.name"), "}"),
footer = "```",
fig.align="center"
)
# Check if renv is installed
if (!require("renv")) {
# Install renv if it is not already installed
install.packages("renv")
}
# Check if renv is already initialized
if (!file.exists("renv.lock")) {
# Initialize renv project
renv::init()
# Restore packages
renv::restore()
}
library(reticulate)
library(tidyverse)
# reticulate::install_miniconda() # if you got an error, you could also try `install_python()` or installing conda seperately on your OS
# assign the right virtual environment for the exercises
env_name <- "MLBA"
# if the virtual enviroment does not already exist, only then create then
if (!env_name %in% reticulate::conda_list()$name) {
reticulate::conda_create(env_name, pip = TRUE) # we use pip for installations
}
# make sure we're using the right environment
reticulate::use_condaenv(env_name)
# if you preferred, you can also use your own version of python with `use_python()`
# you can see all the versions of your path here and which one has been assigned
reticulate::py_config()
# Check if python is setup properly now
reticulate::py_available()
knitr::include_graphics("https://blog.penjee.com/wp-content/uploads/2015/02/pass-by-reference-vs-pass-by-value-animation.gif")
reticulate::repl_python()
# Install python package into virtual environment
reticulate::py_install(c("jupyter", "pandas", "matplotlib","statsmodels","scikit-learn", "seaborn", "mlxtend", "lime", "mkl-service", "xgboost", "lime", "gap-stat","scikit-learn-extra"), envname = "MLBA", pip=TRUE)
# import package that is used for dealing with data.frames in Python (equivalent of tibble+dplyr)
pd <- reticulate::import("pandas")
# Install python package into virtual environment
reticulate::py_install(c("jupyter", "pandas", "matplotlib","statsmodels","scikit-learn", "seaborn", "mlxtend", "lime", "mkl-service", "xgboost", "lime", "gap-stat","scikit-learn-extra"), envname = "MLBA", pip=TRUE)
py_config()
reticulate::py_install("mkl-service")
reticulate::py_install("mkl-service", pip = TRUE)
reticulate::py_install(c("mkl-service"), pip = TRUE)
reticulate::py_install(c("mkl-service"), envname = "MLBA", pip = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
header = paste0("```{", knitr::opts_current$get("engine.name"), "}"),
footer = "```",
fig.align="center"
)
# Check if renv is installed
if (!require("renv")) {
# Install renv if it is not already installed
install.packages("renv")
}
# Check if renv is already initialized
if (!file.exists("renv.lock")) {
# Initialize renv project
renv::init()
# Restore packages
renv::restore()
}
library(reticulate)
library(tidyverse)
# assign the right virtual environment for the exercises
env_name <- "MLBA"
# if the virtual enviroment does not already exist, only then create then
if (!env_name %in% reticulate::conda_list()$name) {
reticulate::conda_create(env_name, pip = TRUE) # we use pip for installations
}
# make sure we're using the right environment
reticulate::use_condaenv(env_name)
# if you preferred, you can also use your own version of python with `use_python()`
# you can see all the versions of your path here and which one has been assigned
reticulate::py_config()
# Check if python is setup properly now
reticulate::py_available()
reticulate::repl_python()
# Install python package into virtual environment
reticulate::py_install(c("jupyter", "pandas", "matplotlib","statsmodels","scikit-learn", "seaborn", "mlxtend", "lime", "mkl-service", "xgboost", "lime", "gap-stat","scikit-learn-extra"), envname = "MLBA", pip=TRUE)
# Install python package into virtual environment
reticulate::py_install(c("jupyter", "pandas", "matplotlib","statsmodels","scikit-learn", "seaborn", "mlxtend", "lime", "xgboost", "lime", "gap-stat","scikit-learn-extra"), envname = "MLBA", pip=TRUE)
# import package that is used for dealing with data.frames in Python (equivalent of tibble+dplyr)
pd <- reticulate::import("pandas")
# import the package for plotting in python
plt <- reticulate::import("matplotlib.pyplot")
# import the library which we will use for linear regression
sm <- reticulate::import("statsmodels.api")
# Using R
## load mtcars dataset
data(mtcars)
## plot it using base R plot function (or ggplot)
plot(mtcars$mpg, mtcars$disp)
# Using Python
# plot it using matplotlib in python (or another python library for plots)
plt$scatter(mtcars$mpg,mtcars$disp)
plt$xlabel('mpg', fontsize = 12)
plt$ylabel('disp', fontsize = 12)
# save the figure and then include in the Rmd
plt$savefig("pyplot.png")
knitr::include_graphics("pyplot.png")
# alternatively, when not knitting, you can uncomment and run the two following lines
# instead of save the figure
# plt$show() # you always have to call this for the plot to be made
# plt$clf() #this means clear figure
reticulate::repl_python()
# plotting the iris data from python
plot(py$iris_data)
# remove the spaces and `(cm)` from the column names
names(py$iris_data) <- gsub(' ', '_', names(py$iris_data))
names(py$iris_data) <- gsub('_\\(cm\\)', '', names(py$iris_data))
# example of running a model on iris data
r_lm <- lm("sepal_length ~. ", data = py$iris_data)
reticulate::repl_python()
# plotting the iris data from python
plot(py$iris_data)
# example of runnning lm model in python -> firstly, process the data
# specify your dependent variable and independent variables
y_iris = select(py$iris_data, "sepal_length")
# plotting the iris data from python
plot(py$iris_data)
reticulate::repl_python()
